buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.2.51'
    id 'org.jetbrains.dokka' version '0.9.17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.2.0'
    testImplementation 'org.assertj:assertj-core:3.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

jar {
    baseName = 'arglib'

    manifest {
        attributes 'Implementation-Title': 'ArgLib',
                'Implementation-Version': version
    }
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    from('.') {
        include 'CHANGELOG.yml'
        include 'README.md'
        include 'LICENSE'
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

task sourcesJar(type: Jar, dependsOn: classes) {

    manifest {
        attributes 'Implementation-Title': 'ArgLib',
                'Implementation-Version': version
    }

    classifier = 'sources'
    from sourceSets.main.allSource

    from('.') {
        include 'CHANGELOG.yml'
        include 'README.md'
        include 'LICENSE'
    }
}

task javadocJar(type: Jar, dependsOn: dokka) {

    manifest {
        attributes 'Implementation-Title': 'ArgLib',
                'Implementation-Version': version
    }

    classifier = 'javadoc'
    from "$buildDir/javadoc"

    from('.') {
        include 'CHANGELOG.yml'
        include 'README.md'
        include 'LICENSE'
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}
